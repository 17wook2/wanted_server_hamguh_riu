<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mockrc8.app.domain.employment.mapper.EmploymentMapper">


    <resultMap id="EmploymentDto" type="Employment">
        <result property="employmentId" column="employment_id"/>
        <result property="companyId" column="company_id"/>
        <result property="title" column="title"/>
        <result property="context" column="context"/>
        <result property="deadline" column="deadline"/>
        <result property="country" column="country"/>
        <result property="location" column="location"/>
        <result property="referralCompensation" column="referral_compensation"/>
        <result property="userCompensation" column="user_compensation"/>
    </resultMap>

    <resultMap id="ReducedEmploymentDto" type="Employment">
        <result property="employmentId" column="employment_id"/>
        <result property="title" column="title"/>
        <result property="deadline" column="deadline"/>
        <result property="compensation" column="compensation"/>
    </resultMap>


<!--    EmploymentImage-->
    <resultMap id="EmploymentImageDto" type="EmploymentImage">
        <result property="employmentImageId" column="employment_image_id"/>
        <result property="employmentId" column="employment_id"/>
        <result property="imageId" column="image_id"/>
    </resultMap>


<!--    EmploymentTechSkill-->
    <resultMap id="EmploymentTechSkillDto" type="EmploymentTechSkill">
        <result property="employmentTechSkillId" column="employment_tech_skill_id"/>
        <result property="employmentId" column="employment_id"/>
        <result property="techSkillId" column="tech_skill_id"/>
    </resultMap>


<!--    TechSkill-->
    <resultMap id="TechSkillDto" type="TechSkill">
        <result property="techSkillId" column="tech_skill_id"/>
        <result property="techSkillName" column="name"/>
    </resultMap>



    <select id="getReducedEmploymentListByCompanyId" parameterType="Long" resultMap="ReducedEmploymentDto">
        select employment_id, title, deadline, (referral_compensation + user_compensation) as compensation from employment where company_id = #{companyId}
    </select>

    <select id="getEmploymentListByCompanyTagName" parameterType="Map" resultMap="EmploymentDto">
        select * from employment where company_id in (select company_id from company_tag where hashtag_name = #{companyTagName}) and employment_id != #{employmentId}
    </select>


    <select id="getEmploymentById" parameterType="Long" resultMap="EmploymentDto">
        select * from employment where employment_id = #{employmentId}
    </select>

<!--    채용 id 체크-->
    <select id="checkEmploymentId" parameterType="Long" resultType="Integer">
        select if( exists( select * from employment where employment_id = #{employmentId} ), 1, 0)
    </select>

    <select id="getEmploymentImageListByEmploymentId" parameterType="Long" resultMap="EmploymentImageDto">
        select * from employment_image where employment_id = #{employmentId}
    </select>

    <select id="getEmploymentImageByEmploymentId" parameterType="Long" resultMap="EmploymentImageDto">
        select * from employment_image where employment_id = #{employmentId} limit 1
    </select>


<!--    채용에 대해 좋아요 누른 유저의 수, 좋아요를 누른 유저들의 프로필 이미지 정보 반환 -->
    <select id="getEmploymentLikeInfoVo" resultMap="EmploymentLikeInfoVo">
        select like_count, user_id, profile_image from (select *, (select count(*) from user_employment_like where employment_id = #{employmentId}) as like_count from user_employment_like) as employment_like left outer join user using(user_id) where employment_id = #{employmentId}
    </select>

    <resultMap id="EmploymentLikeInfoVo" type="EmploymentLikeInfoVo">
        <result property="like_count" column="like_count"/>
        <collection property="userProfileVoList" javaType="java.util.ArrayList" ofType="UserProfileVo">
            <result property="profile_image" column="profile_image"/>
        </collection>
    </resultMap>


<!--    employment_tech_skill -->
<!--    <select id="checkEmploymentTechSkillByEmploymentId" parameterType="Long" resultType="Integer">-->
<!--        select if( exists( select * from employment_tech_skill where employment_id = #{employmentId}), 1, 0)-->
<!--    </select>-->


    <select id="getEmploymentTechSkillListByEmploymentId" parameterType="Long" resultMap="EmploymentTechSkillDto">
        select * from employment_tech_skill where employment_id = #{employmentId}
    </select>


<!--    tech_skill -->
    <select id="getTechSkillById" parameterType="Long" resultMap="TechSkillDto">
        select * from tech_skill where tech_skill_id = #{techSkillId}
    </select>



<!-- 태그 이름 배열을 가지고 조회 -->
    <select id="getEmploymentListByTagNames" resultMap="ReducedEmploymentVo">
        select * from (select employment_id, title, location,
            (select name from company where company_id = employment.company_id) as company_name,
            (referral_compensation + employment.user_compensation) as compensation
        from employment where company_id in
            (select company_id from company_tag where hashtag_name in
                <foreach collection="array" item="tagName" open="(" close=")" separator=",">
                    #{tagName}
                </foreach>
            )
        ) as employment_info
            left outer join
        (select employment_id, image_url from (select * from employment_image group by employment_id) as employment_image
                left outer join
            (select * from image) as image
                using(image_id)) as image
        using(employment_id)
    </select>

<!--    채용 마감 임박 -->
    <select id="getEmploymentListByCloseSoon" resultMap="ReducedEmploymentVo">
        select employment_id, title, location, name as company_name,
        (referral_compensation + user_compensation) as compensation,
        image_id, image_url
        from (select * from employment where deadline between date(now()) and last_day(now())) as e
        left outer join company using(company_id)
        left outer join
        (select * from employment_image left outer join image using(image_id) group by employment_id) as img using(employment_id)

    </select>


    <select id="getEmploymentListByCareerYear" resultMap="ReducedEmploymentVo">
        select employment_id, title, location, name as company_name,
               (referral_compensation + user_compensation) as compensation,
               image_id, image_url
        from (select * from employment where #{minYear} between min_career_year and max_career_year or #{maxYear} between min_career_year and max_career_year) as e
        left outer join company using(company_id)
        left outer join
        (select * from employment_image left outer join image using(image_id) group by employment_id) as img using(employment_id)
    </select>


    <select id="getEmploymentListByTechSkill" resultMap="ReducedEmploymentVo">

        select employment_id, title, location, name as company_name,
               (referral_compensation + user_compensation) as compensation,
               image_id, image_url, tech_skill_id
        from employment_tech_skill left outer join employment using(employment_id)
                                   left outer join company using(company_id)
                                   left outer join
             (select * from employment_image left outer join image using(image_id) group by employment_id) as img using(employment_id)
        <if test="techSkillId != null">
            where tech_skill_id in
            <foreach item="techSkill" collection="array" open="(" close=")" separator=",">
                #{techSkill}
            </foreach>

        </if>
         group by employment_id
    </select>


<!--채용 id로 채용 조회-->
    <select id="getReducedEmploymentByEmploymentId" resultMap="ReducedEmploymentVo">
        select employment_id, title, location, name as company_name,
               logo_image_url,
               (referral_compensation + user_compensation) as compensation,
               image_id, image_url
        from ((select employment_id, image_id from employment_image group by employment_id) as e_image
                 left outer join image using(image_id)
                 left outer join employment using(employment_id)
                 left outer join company using(company_id)) where employment_id = #{employmentId}
    </select>


    <select id="getEmploymentList" resultMap="ReducedEmploymentVo">
        select employment_id, title, location, name as company_name,
               logo_image_url,
               (referral_compensation + user_compensation) as compensation,
               image_id, image_url, created_at
        from ((select employment_id, image_id from employment_image group by employment_id) as e_image
                 left outer join image using(image_id)
                 left outer join employment using(employment_id)
                 left outer join company using(company_id))
                <if test="detailedJobGroupId == null and jobGroupId != null">
                    where employment_id in (select employment_id from employment_job_group where job_group_id = #{jobGroupId})
                </if>

                <if test="detailedJobGroupId != null">
                    where employment_id in (select employment_detailed_job_group.employment_id from
                    (select * from employment where employment_id in (select employment_id from employment_job_group where job_group_id = #{jobGroupId})) as employment_job_group left outer join employment_detailed_job_group using(employment_id) where detailed_job_group_id = #{detailedJobGroupId})
                </if>

                <if test='sort.equals("latest")'>
                    order by created_at desc
                </if>

                <if test='sort.equals("compensation")'>
                    order by compensation desc
                </if>

                <if test='sort.equals("viewCount")'>
                    order by view_count desc
                </if>
    </select>

    <select id="getEmploymentListByTitle" resultMap="ReducedEmploymentVo">
        select employment_id, title, location, name as company_name,
               logo_image_url,
               (referral_compensation + user_compensation) as compensation,
               image_id, image_url, created_at
        from ((select employment_id, image_id from employment_image group by employment_id) as e_image
                 left outer join image using(image_id)
                 left outer join employment using(employment_id)
                 left outer join company using(company_id)) where title like concat('%', #{title}, '%')
        <if test='sort.equals("latest")'>
            order by created_at desc
        </if>

        <if test='sort.equals("compensation")'>
            order by compensation desc
        </if>

        <if test='sort.equals("viewCount")'>
            order by view_count desc
        </if>
    </select>


    <select id="getEmploymentListByJobGroup" resultMap="ReducedEmploymentVo">
        select employment_id, title, location, name as company_name,
               logo_image_url,
               (referral_compensation + user_compensation) as compensation,
               image_id, image_url
        from ((select employment_id, image_id from employment_image group by employment_id) as e_image
                 left outer join image using(image_id)
                 left outer join employment using(employment_id)
                 left outer join company using(company_id)) where employment_id in (select employment_id from employment_job_group where job_group_id = #{jobGroupId});
    </select>


    <select id="getEmploymentListByDetailedJobGroup" resultMap="ReducedEmploymentVo">
        select employment_id, title, location, name as company_name,
               logo_image_url,
               (referral_compensation + user_compensation) as compensation,
               image_id, image_url
        from ((select employment_id, image_id from employment_image group by employment_id) as e_image
                 left outer join image using(image_id)
                 left outer join employment using(employment_id)
                 left outer join company using(company_id)) where employment_id in (select employment_detailed_job_group.employment_id from
            (select * from employment where employment_id in (select employment_id from employment_job_group where job_group_id = #{jobGroupId})) as employment_job_group left outer join employment_detailed_job_group using(employment_id) where detailed_job_group_id = #{detailedJobGroupId})
    </select>


    <select id="getEmploymentListByNationId" resultMap="ReducedEmploymentVo">
        select employment_id, title, location, name as company_name,
               logo_image_url,
               (referral_compensation + user_compensation) as compensation,
               image_id, image_url
        from ((select employment_id, image_id from employment_image group by employment_id) as e_image
                 left outer join image using(image_id)
                 left outer join employment using(employment_id)
                 left outer join company using(company_id)) where nation_id = #{nationId}
    </select>

    <resultMap id="ReducedEmploymentVo" type="ReducedEmploymentVo">
        <result property="employment_id" column="employment_id"/>
        <result property="title" column="title"/>
        <result property="location" column="location"/>
        <result property="company_name" column="company_name"/>
        <result property="compensation" column="compensation"/>
        <result property="image_url" column="image_url"/>
    </resultMap>

    <update id="raiseViewCount">
        update employment set view_count = (select view_count from employment where employment_id = #{employmentId}) + 1 where employment_id = #{employmentId}
    </update>
</mapper>