<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mockrc8.app.domain.company.mapper.CompanyMapper">

    <resultMap id="CompanyDto" type="Company">
        <result property="companyId" column="company_id"/>
        <result property="imageUrl" column="logo_image_url"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>
    </resultMap>



<!--    CompanyImage-->
    <resultMap id="CompanyImageDto" type="CompanyImage">
        <result property="companyImageId" column="company_image_id"/>
        <result property="companyId" column="company_image_id"/>
        <result property="imageId" column="image_id"/>
    </resultMap>

<!--    Image-->
    <resultMap id="ImageDto" type="Image">
        <result property="imageId" column="image_id"/>
        <result property="imageUrl" column="image_url"/>
    </resultMap>

<!--    CompanyTag-->
    <resultMap id="CompanyTagDto" type="CompanyTag">
        <result property="companyTagId" column="hashtag_id"/>
        <result property="companyTagName" column="hashtag_name"/>
    </resultMap>


<!--    CompanyNews-->
    <resultMap id="CompanyNewsDto" type="CompanyNews">
        <result property="companyNewsId" column="company_news_id"/>
        <result property="newsLink" column="news_link"/>
    </resultMap>



    <!--id를 가지는 회사가 존재하는지 여부-->
    <select id="checkCompanyId" parameterType="Long" resultType="Integer">
        select if( exists( select * from company where company_id = #{companyId}), 1, 0)
    </select>

    <!--    회사 생성-->
    <insert id="registerCompany" parameterType="Company" useGeneratedKeys="true" keyProperty="companyId">
        insert into company (image_url, name, description) values (#{imageUrl}, #{name}, #{description})
    </insert>

    <!--모든 회사 조회-->
    <select id="getCompanyList" resultMap="CompanyDto">
        select * from company
    </select>

    <!--회사 id로 조회-->
    <select id="getCompanyById" parameterType="Long" resultMap="CompanyDto">
        select * from company where company_id = #{companyId}
    </select>


<!--    Image 관련    -->
    <select id="getCompanyImageListByCompanyId" parameterType="Long" resultMap="CompanyImageDto">
        select * from company_image where company_id = #{companyId}
    </select>

    <select id="getImageById" parameterType="Long" resultMap="ImageDto">
        select image_id, image_url from image where image_id = #{imageId}
    </select>

    <select id="checkImageId" parameterType="Long" resultType="Integer">
        select if( exists( select * from image where image_id = #{imageId}), 1, 0)
    </select>



    <select id="getImageListByCompanyId" parameterType="Long" resultMap="ImageDto">
        select image_id, image_url from image where image_id in (select company_image.image_id from company_image where company_id = #{companyId})
    </select>

<!--    CompanyTag관련-->

    <select id="getCompanyTagId" parameterType="String" resultType="Long">
        select hashtag_id from company_tag where hashtag_name = #{tagName} limit 1
    </select>

    <select id="checkCompanyTagId" parameterType="Long" resultType="Integer">
        select if( exists( select * from company_tag where hashtag_id = #{companyTagId}), 1, 0)
    </select>

    <select id="getCompanyTagById" parameterType="Long" resultMap="CompanyTagDto">
        select * from company_tag where hashtag_id = #{hashtagId}
    </select>

    <select id="getCompanyTagListByCompanyId" parameterType="Long" resultMap="CompanyTagDto">
        select * from company_tag where company_id = #{companyId}
    </select>


    <!--  태그 id로 조회하려는 태그와, 조회하려는 태그 이름과 중복되지 않는 4개의 랜덤한 태그 목록 반환  -->
    <select id="getCompanyTagListByIdAndRandomList" parameterType="Long" resultMap="CompanyTagDto">
        select * from (select * from company_tag where company_tag.hashtag_name != (select hashtag_name from company_tag where hashtag_id = #{hashtagId}) order by rand() limit 4) as rand_tag
        union
        (select * from company_tag where hashtag_id = #{hashtagId});
    </select>


    <select id="getCompanyListByTagId" parameterType="Long" resultMap="CompanyListSearchedByTagVo">
        select * from
            (select * from company where company_id in
                (select company_id from company_tag where hashtag_name like (select hashtag_name from company_tag where company_tag.hashtag_id = #{hashtagId}))) as company_list
            right outer join
            (select * from company_tag where company_id in (select company_id from company_tag where hashtag_name like
                (select hashtag_name from company_tag where company_tag.hashtag_id = #{hashtagId}))) as tag_list using(company_id)
    </select>

    <select id="getCompanyListByCompanyName" parameterType="String" resultMap="CompanyListSearchedByTagVo">
        select * from
            company left outer join company_tag using(company_id) where company.name like concat('%',#{companyName},'%') group by company.company_id
    </select>

    <select id="countCompanyListByCompanyName" parameterType="String" resultType="Integer">
        select count(distinct(company_id)) from
            company left outer join company_tag using(company_id) where company.name like concat('%',#{companyName},'%')
    </select>

    <select id="getCompanyTagGroupedByTopic" resultMap="CompanyTagGroupedTopicVo">
        select * from
            (select * from company_tag_topic) as topic
                right outer join
            (select hashtag_id, hashtag_name, company_tag_topic_id from company_tag group by hashtag_name) as hashtag
                using(company_tag_topic_id);
    </select>




<!--    CompanyNews관련-->
    <select id="getCompanyNewsListByCompanyId" parameterType="Long" resultMap="CompanyNewsDto">
        select * from company_news where company_id = #{companyId}
    </select>


    <select id="getCompanyJoinedTable" resultMap="CompanyDetailVo" parameterType="Long" >
        select *, (referral_compensation + user_compensation) as compensation
        from company
                 inner join employment e using(company_id)
                 inner join company_tag ct using(company_id)
                 inner join (select company_id, image_id, image_url from (select * from image) as i right outer join (select * from company_image where company_id = #{companyId}) as ci using(image_id)) as image_result using(company_id)
                 inner join company_news using(company_id);
    </select>

    <resultMap id="CompanyDetailVo" type="CompanyDetailVo">
        <result property="company_id" column="company_id"/>
        <result property="logo_image_url" column="logo_image_url"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>

        <collection property="companyTagList" javaType="java.util.ArrayList" ofType="CompanyTag">
            <result property="companyTagId" column="hashtag_id"/>
            <result property="companyTagName" column="hashtag_name"/>
        </collection>

        <collection property="employmentList" javaType="java.util.ArrayList" ofType="Employment">
            <result property="employmentId" column="employment_id"/>
            <result property="title" column="title"/>
            <result property="deadline" column="deadline"/>
            <result property="compensation" column="compensation"/>
        </collection>

        <collection property="companyImageList" javaType="java.util.ArrayList" ofType="Image">
            <result property="imageId" column="image_id"/>
            <result property="imageUrl" column="image_url"/>
        </collection>

        <collection property="companyNewsList" javaType="java.util.ArrayList" ofType="CompanyNews">
            <result property="companyNewsId" column="company_news_id"/>
            <result property="newsLink" column="news_link"/>
        </collection>


    </resultMap>

    <resultMap id="CompanyListSearchedByTagVo" type="CompanyListSearchedByTagVo">
        <result property="company_id" column="company_id"/>
        <result property="image_url" column="logo_image_url"/>
        <result property="name" column="name"/>
        <result property="description" column="description"/>

        <collection property="companyTagList" javaType="java.util.List" ofType="CompanyTag">
            <result property="companyTagId" column="hashtag_id"/>
            <result property="companyTagName" column="hashtag_name"/>
        </collection>
    </resultMap>


    <resultMap id="CompanyTagGroupedTopicVo" type="CompanyTagGroupedTopicVo">
        <result property="company_tag_topic_id" column="company_tag_topic_id"/>
        <result property="company_tag_topic_name" column="company_tag_topic_name"/>

        <collection property="companyTagList" javaType="java.util.ArrayList" ofType="CompanyTag">
            <result property="companyTagId" column="hashtag_id"/>
            <result property="companyTagName" column="hashtag_name"/>
        </collection>
    </resultMap>

</mapper>