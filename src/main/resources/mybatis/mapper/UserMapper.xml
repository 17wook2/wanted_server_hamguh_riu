<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mockrc8.app.domain.user.mapper.UserMapper">
    <insert id="registerUser" parameterType="com.mockrc8.app.domain.user.vo.User" >
        insert into user(name, password, email, phone_number) values (#{name}, #{password}, #{email}, #{phone_number})
    </insert>

    <select id="checkEmail" parameterType="String" resultType="Integer">
        select exists(select email from user where email = #{userEmail})
    </select>

    <select id="checkPhoneNumber" parameterType="String" resultType="Integer">
        select exists(select phone_number from user where phone_number = #{userPhoneNumber})
    </select>

    <select id="findUserByEmail" resultType="User" parameterType="String">
        select * from user where email = #{userEmail}
    </select>

    <update id="updateRefreshToken" parameterType="map">
        UPDATE user
        set refresh_token = #{refreshToken}
        where user_id = #{userId}
    </update>




<!--    <select id="getUserProfile" resultMap="UserProfileVo">-->
<!--        select * from (select * from user where user_id = #{userId}) as u inner join user_employment_bookmark using(user_id) inner join user_employment_like using(user_id)-->
<!--    </select>-->

    <resultMap id="UserProfileVo" type="UserProfileVo">
        <result property="user_id" column="user_id"/>
        <result property="name" column="name"/>
        <result property="email" column="email"/>
        <result property="phone_number" column="phone_number"/>
        <result property="profile_image" column="profile_image"/>

<!--
이후 지원 현황, 관심 있음 등 구성요소를 추가할때 용이하도록,
그리고 유저가 북마크한 채용 목록 조회 API, 유저가 좋아요한 채용 목록 조회 API 에서 재사용하기 위해
mapper 인터페이스의 메서드가 단일 책임 원칙을 만족하도록 작성했습니다.
-->

<!--        <collection property="userEmploymentBookmarkVoList" javaType="java.util.ArrayList" ofType="UserEmploymentBookmarkVo"-->
<!--                    select="com.mockrc8.app.domain.user.mapper.UserMapper.getUserEmploymentBookmarkVo"/>-->

<!--        <collection property="userEmploymentBookmarkVoList" javaType="java.util.ArrayList" ofType="UserEmploymentBookmarkVo">-->
<!--            <result property="user_employment_bookmark_id" column="user_employment_bookmark_id"/>-->
<!--            <result property="user_id" column="user_id"/>-->
<!--            <result property="employment_id" column="employment_id"/>-->
<!--        </collection>-->

<!--        <collection property="userEmploymentLikeVoList" javaType="java.util.ArrayList" ofType="UserEmploymentLikeVo">-->
<!--            <result property="user_employment_like_id" column="user_employment_like_id"/>-->
<!--            <result property="user_id" column="user_id"/>-->
<!--            <result property="employment_id" column="employment_id"/>-->
<!--        </collection>-->
    </resultMap>


    <select id="getUserProfile" resultMap="UserProfileVo">
        select * from user where user_id = #{userId}
    </select>


    <select id="getUserEmploymentBookmarkVoList" resultType="ReducedEmploymentVo">

        <if test="maxCount != null">
            select employment_id, title, location,
            name as company_name,
            logo_image_url
            from (select employment_id from user_employment_bookmark where user_id = #{userId}) as bookmark left outer join employment using(employment_id) left outer join employment_image using(employment_id) left outer join image using(image_id) left outer join company using(company_id) group by employment_id limit 4
        </if>

        <if test="maxCount == null">
            select employment_id, title, location,
            name as company_name,
            (referral_compensation + user_compensation) as compensation,
            image_url
            from (select employment_id from user_employment_bookmark where user_id = #{userId}) as bookmark left outer join employment using(employment_id) left outer join employment_image using(employment_id) left outer join image using(image_id) left outer join company using(company_id) group by employment_id
        </if>

    </select>


    <select id="getUserEmploymentLikeVoList" resultType="ReducedEmploymentVo">
        <if test="maxCount != null">
            select employment_id, title, location,
            name as company_name,
            logo_image_url
            from (select employment_id from user_employment_like where user_id = #{userId}) as bookmark left outer join employment using(employment_id) left outer join employment_image using(employment_id) left outer join image using(image_id) left outer join company using(company_id) group by employment_id limit 4
        </if>

        <if test="maxCount == null">
            select employment_id, title, location, name as company_name,
            (referral_compensation + user_compensation) as compensation,
            image_url from (select employment_id from user_employment_like where user_id = #{userId}) as bookmark left outer join employment using(employment_id) left outer join employment_image using(employment_id) left outer join image using(image_id) left outer join company using(company_id) group by employment_id
        </if>

    </select>

    <select id="getUserInterestTagVoByUserId" resultType="UserInterestTagVo">
        select * from community_tag where community_tag_id in
            (select tag_id from user_interest_tag where user_id = #{userId})
        <if test="maxCount != null">
            limit #{maxCount}
        </if>
    </select>


    <select id="checkUserBookmarked" resultType="Integer">
        select if( exists( select * from user_employment_bookmark where user_id = #{userId} and employment_id = #{employmentId}), 1, 0)
    </select>


    <select id="checkUserLiked" resultType="Integer">
        select if( exists( select * from user_employment_like where user_id = #{userId} and employment_id = #{employmentId}), 1, 0)
    </select>

    <insert id="registerUserBookmark" parameterType="UserEmploymentBookmarkDto" useGeneratedKeys="true" keyProperty="user_employment_bookmark_id">
        insert into user_employment_bookmark(user_id, employment_id) values(#{userEmploymentBookmarkDto.user_id}, #{userEmploymentBookmarkDto.employment_id})
    </insert>

    <delete id="deleteUserBookmark">
        delete from user_employment_bookmark where user_id = #{userEmploymentBookmarkDto.user_id} and employment_id = #{userEmploymentBookmarkDto.employment_id}
    </delete>


    <insert id="registerUserLike" parameterType="UserEmploymentLikeDto" useGeneratedKeys="true" keyProperty="user_employment_like_id">
        insert into user_employment_like(user_id, employment_id) values(#{userEmploymentLikeDto.user_id}, #{userEmploymentLikeDto.employment_id})
    </insert>

    <delete id="deleteUserLike">
        delete from user_employment_like where user_id = #{userEmploymentLikeDto.user_id} and employment_id = #{userEmploymentLikeDto.employment_id}
    </delete>

</mapper>
